apiVersion: v1
kind: Template
metadata:
  name: cyndi-operator
parameters:
- name: IMAGE_TAG
  value: latest
- name: IMAGE
  value: quay.io/cloudservices/cyndi-operator-index
- name: TARGET_NAMESPACE
  value: cyndi
- name: RECONCILE_INTERVAL
  value: "120"
- name: VALIDATION_INTERVAL
  value: "1800"
- name: VALIDATION_INTERVAL_INIT
  value: "60"
- name: VALIDATION_PERCENTAGE_THRESHOLD
  value: "5"
- name: VALIDATION_ATTEMPTS_THRESHOLD
  value: "3"
- name: VALIDATION_ATTEMPTS_THRESHOLD_INIT
  value: "30"
- name: CONNECT_CLUSTER
  value: "xjoin-kafka-connect-strimzi"
- name: CONNECTOR_ALLOWLIST_SP
  value: "sap_system,sap_sids"

objects:
- apiVersion: operators.coreos.com/v1alpha1
  kind: CatalogSource
  metadata:
    name: cyndi-operator-source
  spec:
    sourceType: grpc
    image: ${IMAGE}:${IMAGE_TAG}

- apiVersion: operators.coreos.com/v1
  kind: OperatorGroup
  metadata:
    name: cyndi-operator-group
  spec:
    targetNamespaces:
    - ${TARGET_NAMESPACE}

- apiVersion: operators.coreos.com/v1alpha1
  kind: Subscription
  metadata:
    name: cyndi-subscription
  spec:
    channel: alpha
    name: cyndi
    source: cyndi-operator-source
    sourceNamespace: ${TARGET_NAMESPACE}

- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: cyndi
  data:
    standard.interval: ${RECONCILE_INTERVAL}
    validation.interval: ${VALIDATION_INTERVAL}
    validation.attempts.threshold: ${VALIDATION_ATTEMPTS_THRESHOLD}
    validation.percentage.threshold: ${VALIDATION_PERCENTAGE_THRESHOLD}
    init.validation.interval: ${VALIDATION_INTERVAL_INIT}
    init.validation.attempts.threshold: ${VALIDATION_ATTEMPTS_THRESHOLD_INIT}
    init.validation.percentage.threshold: ${VALIDATION_PERCENTAGE_THRESHOLD}
    connect.cluster: ${CONNECT_CLUSTER}
    connector.allowlist.sp: ${CONNECTOR_ALLOWLIST_SP}
    connector.config: >-
      {
        "connector.class": "io.confluent.connect.jdbc.JdbcSinkConnector",
        "tasks.max": "{{.TasksMax}}",
        "topics": "{{.Topic}}",
        "key.converter": "org.apache.kafka.connect.storage.StringConverter",
        "value.converter": "org.apache.kafka.connect.json.JsonConverter",
        "value.converter.schemas.enable": false,
        "connection.url": "jdbc:postgresql://{{.DBHostname}}:{{.DBPort}}/{{.DBName}}",
        "connection.user": "{{.DBUser}}",
        "connection.password": "{{.DBPassword}}",
        "dialect.name": "EnhancedPostgreSqlDatabaseDialect",
        "auto.create": false,
        "insert.mode": "upsert",
        "delete.enabled": true,
        "batch.size": "{{.BatchSize}}",
        "table.name.format": "inventory.{{.TableName}}",
        "pk.mode": "record_key",
        "pk.fields": "id",
        "fields.whitelist": "account,display_name,tags,updated,created,stale_timestamp,system_profile,insights_id",

        {{ if eq .InsightsOnly "true" }}
        "transforms": "timestampFilter,insightsFilter,deleteToTombstone,extractHost,systemProfileFilter,systemProfileToJson,tagsToJson,injectSchemaKey,injectSchemaValue",
        "transforms.insightsFilter.type":"com.redhat.insights.kafka.connect.transforms.Filter",
        "transforms.insightsFilter.predicate": "!!record.headers().lastWithName('insights_id').value()",
        {{ else  }}
        "transforms": "timestampFilter,deleteToTombstone,extractHost,systemProfileFilter,systemProfileToJson,tagsToJson,injectSchemaKey,injectSchemaValue",
        {{ end }}

        "transforms.timestampFilter.type":"com.redhat.insights.kafka.connect.transforms.Filter",
        "transforms.timestampFilter.predicate": "(Date.now() - record.timestamp()) < {{.MaxAge}} * 24 * 60 * 60 * 1000",
        "transforms.deleteToTombstone.type":"com.redhat.insights.kafka.connect.transforms.DropIf$Value",
        "transforms.deleteToTombstone.predicate": "'delete'.equals(record.headers().lastWithName('event_type').value())",
        "transforms.extractHost.type":"org.apache.kafka.connect.transforms.ExtractField$Value",
        "transforms.extractHost.field":"host",
        "transforms.systemProfileFilter.type": "com.redhat.insights.kafka.connect.transforms.FilterFields$Value",
        "transforms.systemProfileFilter.field": "system_profile",
        "transforms.systemProfileFilter.allowlist": "{{.AllowlistSP}}",
        "transforms.systemProfileToJson.type": "com.redhat.insights.kafka.connect.transforms.FieldToJson$Value",
        "transforms.systemProfileToJson.originalField": "system_profile",
        "transforms.systemProfileToJson.destinationField": "system_profile",
        "transforms.tagsToJson.type": "com.redhat.insights.kafka.connect.transforms.FieldToJson$Value",
        "transforms.tagsToJson.originalField": "tags",
        "transforms.tagsToJson.destinationField": "tags",
        "transforms.injectSchemaKey.type": "com.redhat.insights.kafka.connect.transforms.InjectSchema$Key",
        "transforms.injectSchemaKey.schema": "{\"type\":\"string\",\"optional\":false, \"name\": \"com.redhat.cloud.inventory.syndication.pgtype=uuid\"}",
        "transforms.injectSchemaValue.type": "com.redhat.insights.kafka.connect.transforms.InjectSchema$Value",
        "transforms.injectSchemaValue.schema": "{\"type\":\"struct\",\"fields\":[{\"type\":\"string\",\"optional\":false,\"field\":\"account\"},{\"type\":\"string\",\"optional\":false,\"field\":\"display_name\"},{\"type\":\"string\",\"optional\":false,\"field\":\"tags\", \"name\": \"com.redhat.cloud.inventory.syndication.pgtype=jsonb\"},{\"type\":\"string\",\"optional\":false,\"field\":\"updated\", \"name\": \"com.redhat.cloud.inventory.syndication.pgtype=timestamptz\"},{\"type\":\"string\",\"optional\":false,\"field\":\"created\", \"name\": \"com.redhat.cloud.inventory.syndication.pgtype=timestamptz\"},{\"type\":\"string\",\"optional\":false,\"field\":\"stale_timestamp\", \"name\": \"com.redhat.cloud.inventory.syndication.pgtype=timestamptz\"},{\"type\":\"string\",\"optional\":false,\"field\":\"system_profile\", \"name\": \"com.redhat.cloud.inventory.syndication.pgtype=jsonb\"},{\"type\":\"string\",\"optional\":true,\"field\":\"insights_id\"}],\"optional\":false}",

        "errors.tolerance": "all",
        "errors.deadletterqueue.topic.name": "platform.cyndi.dlq",
        "errors.deadletterqueue.topic.replication.factor": 1,
        "errors.deadletterqueue.context.headers.enable":true,
        "errors.retry.delay.max.ms": 60000,
        "errors.retry.timeout": 600000,
        "errors.log.enable":true,
        "errors.log.include.messages":true,

        "connection.attempts": 60,
        "connection.backoff.ms": 10000
      }

# TODO: move this into the bundle itself
# depends on https://github.com/operator-framework/operator-sdk/pull/4137
- apiVersion: v1
  kind: Service
  metadata:
    name: cyndi-operator
    labels:
      control-plane: controller-manager
  spec:
    ports:
    - name: https
      protocol: TCP
      port: 8080
      targetPort: 8080
    selector:
      control-plane: controller-manager
